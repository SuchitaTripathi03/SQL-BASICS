USE mavenmovies;
##functions
## Question 1:Retrieve the total number of rentals made in the Sakila database.
SELECT COUNT(*) FROM rental;
## Question 2:Find the average rental duration (in days) of movies rented from the Sakila database.
SELECT AVG(rental_duration) FROM film;
##String Functions:
## Question 3:Display the first name and last name of customers in uppercase.
SELECT UPPER(first_name), UPPER(last_name) FROM customer;
## Question 4:Extract the month from the rental date and display it alongside  the rental ID.
SELECT rental_id, MONTH(rental_date) FROM rental;
##GROUP BY:
## Question 5:Retrieve the count of rentals for each customer (display customer ID and the count of rentals).
SELECT customer_id, COUNT(rental_id)
FROM rental
GROUP BY
    customer_id;
## Question 6:Find the total revenue generated by each store.
SELECT
    s.store_id,
    SUM(p.amount) AS total_revenue
FROM store s
JOIN staff st ON s.manager_staff_id = st.staff_id
JOIN payment p ON st.staff_id = p.staff_id
GROUP BY
    s.store_id;
## Question 7:Determine the total number of rentals for each category of movies.
SELECT
    c.name,
    COUNT(r.rental_id) AS rental_count
FROM category c
JOIN film_category fc ON c.category_id = fc.category_id
JOIN inventory i ON fc.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY
    c.name;
## Question 8:Find the average rental rate of movies in each language.
SELECT
    l.name,
    AVG(f.rental_rate) AS average_rental_rate
FROM language l
JOIN film f ON l.language_id = f.language_id
GROUP BY
    l.name;
##JOINS   
## Questions 9 -Display the title of the movie, customer s first name, and last name who rented it.
SELECT
    f.title,
    c.first_name,
    c.last_name
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN customer c ON r.customer_id = c.customer_id;
## Question 10:Retrieve the names of all actors who have appeared in the film "Gone with the Wind."
SELECT
    a.first_name,
    a.last_name
FROM actor a
JOIN film_actor fa ON a.actor_id = fa.actor_id
JOIN film f ON fa.film_id = f.film_id
WHERE
    f.title = 'Gone with the Wind';
## Question 11:Retrieve the customer names along with the total amount they've spent on rentals.
SELECT
    c.first_name,
    c.last_name,
    SUM(p.amount) AS total_spent
FROM customer c
JOIN payment p ON c.customer_id = p.customer_id
GROUP BY
    c.customer_id,
    c.first_name,
    c.last_name
ORDER BY
    c.customer_id;
## Question 12:List the titles of movies rented by each customer in a particular city (e.g., 'London')
SELECT
    f.title
FROM city ci
JOIN address a ON ci.city_id = a.city_id
JOIN customer c ON a.address_id = c.address_id
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
JOIN film f ON i.film_id = f.film_id
WHERE
    ci.city = 'London';
## Advanced Joins and GROUP BY:
## Question 13:Display the top 5 rented movies along with the number of times they've been rented.
SELECT
    f.title,
    COUNT(r.rental_id) AS rental_count
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
GROUP BY
    f.title
ORDER BY
    rental_count DESC
LIMIT 5;
## Question 14:Determine the customers who have rented movies from both stores (store ID 1 and store ID 2).
SELECT
    c.first_name,
    c.last_name
FROM customer c
JOIN rental r ON c.customer_id = r.customer_id
JOIN inventory i ON r.inventory_id = i.inventory_id
WHERE
    i.store_id IN (1, 2)
GROUP BY
    c.customer_id,
    c.first_name,
    c.last_name
HAVING
    COUNT(DISTINCT i.store_id) = 2;
## Windows Function:
##question 1. Rank the customers based on the total amount they've spent on rentals.
SELECT
    customer_id,
    SUM(amount) AS total_spent,
    RANK() OVER (ORDER BY SUM(amount) DESC) AS customer_rank
FROM payment
GROUP BY
    customer_id
ORDER BY
    total_spent DESC;
##question 2. Calculate the cumulative revenue generated by each film over time.
SELECT
    f.title,
    p.payment_date,
    SUM(p.amount) OVER (PARTITION BY f.film_id ORDER BY p.payment_date) AS cumulative_revenue
FROM film f
JOIN inventory i ON f.film_id = i.film_id
JOIN rental r ON i.inventory_id = r.inventory_id
JOIN payment p ON r.rental_id = p.rental_id
ORDER BY
    f.title,
    p.payment_date;
##question 3. Determine the average rental duration for each film, considering films with similar lengths.
SELECT
    title,
    length,
    rental_duration,
    AVG(rental_duration) OVER (ORDER BY length RANGE BETWEEN 10 PRECEDING AND 10 FOLLOWING) AS average_duration_of_similar_length_films
FROM film;
##question 4. Identify the top 3 films in each category based on their rental counts.
WITH FilmRentalCounts AS (
    SELECT
        c.name AS category_name,
        f.title AS film_title,
        COUNT(r.rental_id) AS rental_count,
        RANK() OVER (PARTITION BY c.name ORDER BY COUNT(r.rental_id) DESC) AS rank_within_category
    FROM category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN film f ON fc.film_id = f.film_id
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        c.name,
        f.title
)
SELECT
    category_name,
    film_title,
    rental_count
FROM FilmRentalCounts
WHERE
    rank_within_category <= 3
ORDER BY
    category_name,
    rental_count DESC;
##question 5. Calculate the difference in rental counts between each customer's total rentals and the average rentals
## across all customers.
WITH CustomerRentals AS (
    SELECT
        customer_id,
        COUNT(rental_id) AS customer_rental_count
    FROM rental
    GROUP BY
        customer_id
),
OverallAverage AS (
    SELECT
        AVG(customer_rental_count) AS avg_rental_count
    FROM CustomerRentals
)
SELECT
    cr.customer_id,
    cr.customer_rental_count,
    oa.avg_rental_count,
    cr.customer_rental_count - oa.avg_rental_count AS difference_from_average
FROM CustomerRentals cr, OverallAverage oa;
##question 6. Find the monthly revenue trend for the entire rental store over time.
SELECT
    DATE_FORMAT(payment_date, '%Y-%m') AS month,
    SUM(amount) AS monthly_revenue
FROM payment
GROUP BY
    month
ORDER BY
    month;
##question 7. Identify the customers whose total spending on rentals falls within the top 20% of all customer
    WITH CustomerSpending AS (
    SELECT
        customer_id,
        SUM(amount) AS total_spent
    FROM payment
    GROUP BY
        customer_id
)
SELECT
    cs.customer_id,
    cs.total_spent
FROM CustomerSpending cs
JOIN (
    SELECT
        customer_id,
        NTILE(5) OVER (ORDER BY total_spent DESC) AS spending_group
    FROM CustomerSpending
) AS RankedCustomers ON cs.customer_id = RankedCustomers.customer_id
WHERE
    RankedCustomers.spending_group = 1
ORDER BY
    cs.total_spent DESC;
## question 8. Calculate the running total of rentals per category, ordered by rental count.
WITH CategoryRentalCounts AS (
    SELECT
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM category c
    JOIN film_category fc ON c.category_id = fc.category_id
    JOIN inventory i ON fc.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    GROUP BY
        c.name
)
SELECT
    category_name,
    rental_count,
    SUM(rental_count) OVER (ORDER BY rental_count DESC) AS running_total
FROM CategoryRentalCounts
ORDER BY
    rental_count DESC;
## question 9. Find the films that have been rented less than the average rental count for their respective categories.
WITH FilmRentalCounts AS (
    SELECT
        f.title,
        c.name AS category_name,
        COUNT(r.rental_id) AS rental_count
    FROM film f
    JOIN inventory i ON f.film_id = i.film_id
    JOIN rental r ON i.inventory_id = r.inventory_id
    JOIN film_category fc ON f.film_id = fc.film_id
    JOIN category c ON fc.category_id = c.category_id
    GROUP BY
        f.title,
        c.name
),
CategoryAverages AS (
    SELECT
        category_name,
        AVG(rental_count) AS avg_category_rentals
    FROM FilmRentalCounts
    GROUP BY
        category_name
)
SELECT
    frc.title,
    frc.category_name,
    frc.rental_count
FROM FilmRentalCounts frc
JOIN CategoryAverages ca ON frc.category_name = ca.category_name
WHERE
    frc.rental_count < ca.avg_category_rentals
ORDER BY
    frc.category_name,
    frc.rental_count DESC;
## question 10. Identify the top 5 months with the highest revenue and display the revenue generated in each month.
SELECT
    DATE_FORMAT(payment_date, '%Y-%m') AS month,
    SUM(amount) AS monthly_revenue
FROM payment
GROUP BY
    month
ORDER BY
    monthly_revenue DESC
LIMIT 5;
